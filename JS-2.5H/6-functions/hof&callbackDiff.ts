//**Callback ve Higher Order Function (HOF) FarkÄ±:**
/*
- **Callback:** BaÅŸka bir fonksiyona "iÅŸ bittiÄŸinde ÅŸunu yap" talimatÄ± veren fonksiyondur.
- **HOF:** BaÅŸka bir fonksiyonu parametre olarak alabilen veya bir fonksiyon dÃ¶ndÃ¼ren fonksiyondur.

Kahve DÃ¼kkanÄ± Analojisi:
- **Callback:** "Kahven hazÄ±r olunca ÅŸunu yap" demek (Ã¶rneÄŸin: "Ä°Ã§").
- **HOF:** "Sana Ã¶zel bir kahve tarifi vereyim" demek ya da "Kahve makinesi verirken sana Ã¶zel bir seÃ§enek sunayÄ±m".
*/






// ğŸ”¹ **1. Sadece HOF: Fonksiyon Parametre Olarak Alma (Callback Yok)**

function sadeKahve(isim: string): string {
    return `${isim} iÃ§in sade kahve hazÄ±r!`;
}

function kahveHazirla(tarifFonksiyonu: (isim: string) => string, isim: string): string {
    return tarifFonksiyonu(isim);  // HOF: Tarif fonksiyonunu parametre olarak alÄ±yor
}

console.log(kahveHazirla(sadeKahve, "Ali"));  // Ã‡Ä±ktÄ±: Ali iÃ§in sade kahve hazÄ±r!


// ğŸ”¹ **2. Sadece HOF: Fonksiyon DÃ¶ndÃ¼rme (Callback Yok)**

function kahveBoyutu(boyut: number) {
    return (isim: string) => `${isim} iÃ§in ${boyut} ml kahve hazÄ±r!`;  // HOF: Fonksiyon dÃ¶ndÃ¼rÃ¼yor
}

const kucukKahve = kahveBoyutu(200);
console.log(kucukKahve("AyÅŸe"));  // Ã‡Ä±ktÄ±: AyÅŸe iÃ§in 200 ml kahve hazÄ±r!


// ğŸ”¹ **3. HOF + Callback: Teslimat TalimatÄ±**

function kahveTeslimEt(isim: string, callback: (mesaj: string) => void) {
    const mesaj = `${isim} iÃ§in kahve teslim edildi!`;
    callback(mesaj);  // Callback: Ä°ÅŸ bittiÄŸinde ne yapÄ±lacaÄŸÄ± sÃ¶yleniyor
}

kahveTeslimEt("Veli", mesaj => console.log(mesaj));  // Ã‡Ä±ktÄ±: Veli iÃ§in kahve teslim edildi!


// ğŸ”¹ **4. HOF + Callback BirleÅŸimi: Rol KontrolÃ¼ ve Teslimat**

function baristaKontrolu(gerekliRol: string) {
    return (barista: { isim: string, rol: string }) => barista.rol === gerekliRol;  // HOF: Fonksiyon dÃ¶ndÃ¼rÃ¼yor
}

const kahveYapabilirMi = baristaKontrolu("usta");

function rolBazliTeslimat(rolKontrol: (b: { isim: string, rol: string }) => boolean) {
    return (barista: { isim: string, rol: string }, callback: (mesaj: string) => void) => {
        const durum = rolKontrol(barista) ? "kahveyi yapabilir!" : "kahveyi yapamaz!";
        callback(`${barista.isim} ${durum}`);  // HOF: Hem rolKontrol alÄ±yor hem callback kullanÄ±yor
    };
}

const ustaTeslimat = rolBazliTeslimat(kahveYapabilirMi);
ustaTeslimat({ isim: "Ali", rol: "Ã§Ä±rak" }, mesaj => console.log(mesaj));  // Ã‡Ä±ktÄ±: Ali kahveyi yapamaz!

// ğŸ”¹ **Ã–zet:**
// - **Callback:** "Sonra ÅŸunu yap" diyen fonksiyonlardÄ±r. HOF'lar iÃ§inde kullanÄ±labilir.
// - **HOF:** Parametre olarak fonksiyon alÄ±r veya fonksiyon dÃ¶ndÃ¼rÃ¼r. Callback'leri iÃ§erebilir ama zorunlu deÄŸildir.
// - **Birlikte KullanÄ±m:** Hem HOF hem callback kullanÄ±ldÄ±ÄŸÄ±nda iÅŸlem akÄ±ÅŸÄ±nÄ± kontrol edebiliriz (Ã¶rneÄŸin: `kahveTeslimEt` ve `rolBazliTeslimat`).
